//示例代码：实现远程调用用户信息
//1  , b（服务机） 工程代码:
pom.xml>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.liu.dubbp</groupId>
  <artifactId>dubbo-b</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>war</packaging>
  
  <dependencies>
		<!-- dubbo采用spring配置方式，所以需要导入spring容器依赖 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>4.1.3.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.6.4</version>
		</dependency>
		
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>dubbo</artifactId>
			<version>2.5.3</version>
			<exclusions>
				<exclusion>
					<!-- 排除传递spring依赖 -->
					<artifactId>spring</artifactId>
					<groupId>org.springframework</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.zookeeper</groupId>
			<artifactId>zookeeper</artifactId>
			<version>3.3.3</version>
		</dependency>

		<dependency>
			<groupId>com.github.sgroschupf</groupId>
			<artifactId>zkclient</artifactId>
			<version>0.1</version>
		</dependency>

		<dependency>
			<groupId>com.liu.dubboapi</groupId>
			<artifactId>dubbo-b-api</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
  </dependencies>
		<build>
		<plugins>
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<port>9090</port>
					<path>/</path>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
//pojo类 User》》》》》》》》》》》》》》》》》》
public class User implements Serializable{

	private Long id;
	private String username;

	private String password;

	private String phone;

	private String email;

	private Date created;

	private Date updated;

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public Date getCreated() {
		return created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	public Date getUpdated() {
		return updated;
	}

	public void setUpdated(Date updated) {
		this.updated = updated;
	}

	@Override
	public String toString() {
		return "User [id=" + id + ", username=" + username + ", password="
				+ password + ", phone=" + phone + ", email=" + email
				+ ", created=" + created + ", updated=" + updated + "]";
	}
}
//接口UserService》》》》》》》》》》》》》》》》》》》
public interface UserService {

		public List<User> queryAll() throws InterruptedException;
}
//实现类UserServiceImpl>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
public class UserServiceImpl implements UserService{

	public List<User> queryAll() throws InterruptedException {
		List<User> users = new ArrayList<User>();
		for (Long i = 0l; i < 100; i++) {
			User user = new User();
			user.setId(i);
			if (i%2 == 0) {
				user.setUsername("女护士" + i);
			}else {
				user.setUsername("女同学" + i);
			}
			users.add(user);
		}
		return users;
	}
}
//配置文件dubbo-b.xnl
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

	<!-- 提供方应用信息，用于计算依赖关系 -->
	<dubbo:application name="dubbo-b-server" />

	<!-- 这里使用的注册中心是zookeeper -->
	<dubbo:registry address="zookeeper://127.0.0.1:2181" client="zkclient"/>

	<!-- 用dubbo协议在20880端口暴露服务 -->
	<dubbo:protocol name="dubbo" port="20880" />

	<!-- 将该接口暴露到dubbo中 -->
	<dubbo:service interface="com.liu.dubbo.service.UserService" ref="userServiceImpl" />
	<!-- 将具体的实现类加入到Spring容器中 -->
	<bean id="userServiceImpl" class="com.liu.dubbo.service.impl.UserServiceImpl" />
</beans>

//web.xml》》》》》》》》》》》》》》》》》》》》》》》
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">
	
	<display-name>dubbo-b</display-name>
	
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:dubbo/dubbo-*.xml</param-value>
	</context-param>
	
	<!--Spring的ApplicationContext 载入 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
    <welcome-file-list>
    	<welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
</web-app>
//2 ，dubbo-a(客户机)代码》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》
//复制User 和接口UserService
//配置文件
<!-- 提供方应用信息，用于计算依赖关系 -->
	<dubbo:application name="dubbo-a-consumer" />

	<!-- 这里使用的注册中心是zookeeper -->
	<dubbo:registry address="zookeeper://127.0.0.1:2181" client="zkclient"/>
	
	<!-- 从注册中心中查找服务 -->
	<dubbo:reference id="userService" interface="com.liu.dubbo.service.UserService"/>
  //3 , 测试
  public class DubboServiceTest {
	@Autowired
	public UserService userService;
	
	@Before
	public void setUp() throws Exception {
		ApplicationContext applicationContext = new ClassPathXmlApplicationContext(
				"classpath:dubbo/dubbo-consumer.xml");
		this.userService = applicationContext.getBean(UserService.class);
	}

	@Test
	public void testQueryAll() throws InterruptedException {
		List<User> users = this.userService.queryAll();
		for (User user : users) {
			System.out.println(user);
			Thread.sleep(100);
		}
	}
}
  
  //这是最简单的入门demo
